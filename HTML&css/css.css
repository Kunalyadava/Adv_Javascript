/* https://github.com/AdamMarsden/css-cheat-sheet */

 /* What is the difference between the class selector and ID selector?
A class selector takes an overall block while an ID selector takes a 
single element that differs from others.


A CSS pseudo-element is used to style specified parts of an element.

For example, it can be used to:

Style the first letter, or line, of an element
Insert content before, or after, the content of an element

::after 	p::after	Insert content after every P element
::before	p::before	Insert content before every P element
::first-letter	p::first-letter	Selects the first letter of every P element
::first-line	p::first-line	Selects the first line of every P element
::marker	::marker	Selects the markers of list items
::selection	p::selection	Selects the portion of an element that is selected by a user
</P>
<!-- https://www.youtube.com/watch?v=GLbi2KmjRKM -->


What are Pseudo-classes?
A pseudo-class is used to define a special state of an element.
For example, it can be used to:

Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus



Selector	     Example       	   Example description
:active	        a:active	       Selects the active link
:checked	  input:checked      	Selects every checked <input> element
:disabled	 input:disabled	       Selects every disabled <input> element
:empty	       p:empty	            Selects every <p> element that has no children
:enabled	  input:enabled	       Selects every enabled <input> element
:first-child	p:first-child    	Selects every <p> elements that is the first child of its parent
:first-of-type	p:first-of-type 	Selects every <p> element that is the first <p> element of its parent
:focus	   input:focus	Selects the   <input> element that has focus
:hover	       a:hover	                Selects links on mouse over
:last of type //p:nth child(even)

 */



 /* What is CSS?
 CSS stands for Cascading Style Sheet. It’s a style sheet language 
 that determines how the elements/contents in the page are looked/shown. 
 CSS is used to develop a consistent look and feel for all the pages.
 
 CSS was developed and is maintained by the World Wide Web Consortium (W3C).
  It was first released on December 17, 1996. 

  //

 1. What is the Box model in CSS? Which CSS properties are a part of it?
 A rectangle box is wrapped around every HTML element. 
 The box model is used to determine the height and width of the rectangular box. 
 The CSS Box consists of Width and height (or in the absence of that,
  default values and the content inside), padding, borders, margin.

content  : Actual Content of the box where the text or image is placed.
Padding: Area surrounding the content (Space between the border and content).
Border: Area surrounding the padding.
Margin: Area surrounding the border. */


/* 
what is VH/VW (viewport height/ viewport width) in CSS?
It’s a CSS unit used to measure the height and width in percentage with respect to
 the viewport. It is used mainly in responsive design techniques. 
 The measure VH is equal to 1/100 of the height of the viewport. 
 If the height of the browser is 1000px, 1vh is equal to 10px. 
 Similarly, if the width is 1000px, then 1 vw is equal to 10px. */


 /* what is the difference between inline, inline-block, and block?
 Block Element: The block elements always start on a new line.
  They will also take space for an entire row or width. 
  List of block elements are <div>, <p>.
 
 Inline Elements: Inline elements don't start on a new line, 
 they appear on the same line as the content and tags beside them.
  Some examples of inline elements are <a>, <span> , <strong>, and <img> tags. 
 
 Inline Block Elements: Inline-block elements are similar to inline elements,
  except they can have padding and margins and set height and width values.
  */

/* 
  There are different ways to specify units in CSS like px, em, pt, percentage (%). px(Pixel)
   gives fine-grained control and maintains alignment because 1 px or multiple of 1 px is guaranteed 
   to look sharp. px is not cascade. em maintains relative size. you can have responsive fonts.
    Em, will cascade 1em is equal to the current font-size of the element or the browser default.
     If u sent font-size to 16px then 1em = 16px. The common practice is
      to set default body font-size to 62.5% (equal to 10px).

  pt(point) are traditionally used in print. 1pt = 1/72 inch and it is a fixed-size unit.
  
  %(percentage) sets font-size relative to the font size of the body.
   Hence, you have to set the font-size of the body to a reasonable size */


/* what property is used for changing the font face?
We can use the font-family property for achieving this */



/* How border-box different from content-box?
content-box is the default value box-sizing property. 
The height and the width properties consist only of the content
 by excluding the border and padding. 

 border-box  property includes the content, padding and border 
 in the height and width properties.  */


 /* The properties of flexbox are as follows:

 flex-direction: This property helps in defining the direction the container 
 should stack the items targetted for flex. The values of this property can be
 row: Stacks items horizontally from left to right in the flex container.
 column: Stacks items vertically from top to bottom in the flex container.
 row-reverse: Stacks items horizontally from right to left in the flex container.
 column-reverse: Stacks items vertically from bottom to top in the flex container.
 flex-wrap: This property specifies of the flex items should be wrapped or not. Possible values are:
 wrap: The flex items would be wrapped if needed.
 nowrap: This is the default value that says the items won’t be wrapped.
 wrap-reverse: This specifies that the items will be wrapped if needed but in reverse order.
 flex-flow: This property is used for setting both flex-direction and flex-wrap properties in one statement.
 justify-content: Used for aligning the flex items. Possible values are:
 center: It means that all the flex items are present at the center of the container.
 flex-start: This value states that the items are aligned at the start of the container. This is the default value.
 flex-end: This value ensures the items are aligned at the end of the container.
 space-around: This value displays the items having space between, before, around the items.
 space-between: This value displays items with spaces between the lines.
 align-items: This is used for aligning flex items.
 align-content: This is used for aligning the flex lines. */

/* 
 Explain CSS position property?
 
static	   Default value.  Elements render in order, as they appear in the document flow	
absolute	The element is positioned relative to its first positioned (not static) ancestor element	
fixed	    The element is positioned relative to the browser window	
relative	The element is positioned relative to its normal position, 
           so "left:20px" adds 20 pixels to the element's LEFT position	
sticky	    The element is positioned based on the user's scroll position
            A sticky element toggles between relative and fixed, depending on the 
            scroll position. It is positioned relative until a given offset position is 
            met in the viewport - then it "sticks" in place (like position:fixed).
initial	:   Sets this property to its default value. Read about initial	
inherit	:  Inherits this property from its parent element. Read about inherit 

https://www.w3schools.com/cssref/pr_class_position.php  */


/* 
. What is specificity? How to calculate specificity?
A process of determining which CSS rule will be applied to an element. 
It actually determines which rules will take precedence. Inline style
 usually wins then ID then the class value (or pseudo-class or attribute selector),
  the universal selector (*) has no specificity. 
  ID selectors have a higher specificity than attribute selectors. */

  /* What does the :root pseudo-class refer to?
  The :root selector allows you to target the highest-level
“parent” element in the DOM, or document tree. */




/* Can you name the four types of @media properties?
The four types of @media properties are:
All → It’s the default property. Used for all media-type devices.
Screen → Used for computer screen, mobile screen.
Print → Used for printers.
Speech → Used for screen readers.


What is the grid system?
CSS Grid Layout is the most powerful layout system available in CSS. 
It is said to be a 2-dimensional system, meaning it can handle both
 columns and rows, unlike flexbox which is largely a 1-dimensional system.

what are the different ways to hide the element using CSS?
Using display property(display: none). It’s not available for screen readers. 
The element will not exist in the DOM if display: none is used.
Using visibility property(visibility: hidden), will take up the space of the element.
 It will be available to screen reader users. The element will actually 
 be present in the DOM, but not shown on the screen.
Using position property (position: absolute). Make it available outside the screen. */



/* css selectors?



Difference between CSS grid vs flexbox?
CSS Grid Layout is a two-dimensional system, meaning it can handle both
 columns and rows. Grid layout is intended for larger-scale layouts which aren’t linear in design.
Flexbox is largely a one-dimensional system (either in a column or a row). 
Flexbox layout is most appropriate to the components of an application. */




/* What is a float property?
The float CSS property places an element on the left or right side of its container,
 allowing text and inline elements to wrap around it.  */






















 /* .cn {
	display: flex;
	justify-content: center;
	align-items: center;
} */





/* 
///////

- `display`=flex
         
- `flex-direction`
- `flex-direction` can accept one of four values:
   `row`
   `row-reverse`
    `column`
     `column-reverse`
- `flex-wrap`
     wrap   no-wrap   wrap-reverse

- `flex-flow`
     
- `justified-content`
   `flex-start` `flex-end` `center` 
  `space-between` `space-around` `space-evenly`



- `align-items`
`flex-start` `flex-end` `center` 
 baseline stretch 

- `align-content` */